// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name init-database
// npx prisma generate sau khi thay doi schema
// npx prisma studio
generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["typedSql"] this features not support for sql-server
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Employee {
  id            Int           @id @default(autoincrement())
  phone         String?
  address       String?
  email         String        @unique
  name          String
  gender        String?
  age           Int?
  avatar        String?
  password      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  refreshToken  String?
  provider      String        @default("credentials")
  emailVerified Boolean       @default(false)
  records       Record[]
  evaluations   Evaluation[]
  educations    Education[]
  experiences   Experience[]
  certificates  Certificate[]
  isBanned      Boolean       @default(false)
}

model Education {
  id          Int                 @unique @default(autoincrement())
  school      String
  major       String
  description String?
  startDate   DateTime
  endDate     DateTime
  employee    Employee            @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employeeId  Int
  record      EducationOnRecord[]

  @@id([id, employeeId]) // Composite primary key
}

model Experience {
  id          Int                  @unique @default(autoincrement())
  employeeId  Int
  company     String
  position    String
  description String?
  url         String?
  image       String?
  startDate   DateTime
  endDate     DateTime
  employee    Employee             @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  record      ExperienceOnRecord[]

  @@id([id, employeeId]) // Composite primary key
}

model Certificate {
  id           Int                   @unique @default(autoincrement())
  name         String
  organization String
  url          String
  image        String
  verifiedDate DateTime
  employee     Employee              @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employeeId   Int
  record       CertificateOnRecord[]

  @@id([id, employeeId]) // Composite primary key
}

model Employer {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  name             String
  gender           String?
  age              Int?
  avatar           String?
  password         String
  refreshToken     String?
  provider         String            @default("credentials")
  emailVerified    Boolean           @default(false)
  hiringDate       DateTime?
  department       String
  position         String
  company          Company?          @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  companyId        Int?
  recruitmentPosts RecruitmentPost[]
  isBanned         Boolean           @default(false)
}

model ExperienceOnRecord {
  experienceId Int
  recordId     Int
  experience   Experience @relation(fields: [experienceId], references: [id])
  record       Record     @relation(fields: [recordId], references: [id])

  @@id([experienceId, recordId]) // Composite primary key
}

model EducationOnRecord {
  educationId Int
  recordId    Int
  education   Education @relation(fields: [educationId], references: [id])
  record      Record    @relation(fields: [recordId], references: [id])

  @@id([educationId, recordId]) // Composite primary key
}

model CertificateOnRecord {
  certificateId Int
  recordId      Int
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  record        Record      @relation(fields: [recordId], references: [id])

  @@id([certificateId, recordId]) // Composite primary key
}

model Company {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  url         String
  industry    String
  size        String
  address     String
  employers   Employer[]
  logo        String?
  cover       String?
  domains     DomainOnCompany[]
}

model Domain {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  company     DomainOnCompany[]
}

model DomainOnCompany {
  domainId  Int
  domain    Domain  @relation(fields: [domainId], references: [id])
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  @@id([domainId, companyId]) // Composite primary key
}

model Evaluation {
  id                Int             @id @default(autoincrement())
  rating            Float
  saved             Boolean         @default(false)
  employee          Employee        @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employeeId        Int
  recruitmentPost   RecruitmentPost @relation(fields: [recruitmentPostId], references: [id])
  recruitmentPostId Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
}

model Record {
  id              Int                       @id @default(autoincrement())
  title           String
  description     String
  owner           Employee                  @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ownerId         Int
  recruitmentPost RecordOnRecruitmentPost[]
  fileCv          File                      @relation(fields: [fileCvId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fileCvId        Int
  experience      ExperienceOnRecord[]
  education       EducationOnRecord[]
  certificate     CertificateOnRecord[]
}

model File {
  id        Int      @id @default(autoincrement())
  name      String   @default("Untitled")
  mimeType  String?
  size      Int?
  url       String
  record    Record[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model RecruitmentPost {
  id                       Int                       @id @default(autoincrement())
  title                    String
  description              String
  jobDescription           JobDescription?
  evaluations              Evaluation[]
  records                  RecordOnRecruitmentPost[]
  employer                 Employer                  @relation(fields: [employerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employerId               Int
  totalSaved               Int                       @default(0)
  averageRating            Float                     @default(0)
  datePosted               DateTime
  deadline                 DateTime
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt
  recruitmentPostPositions RecruitmentPostPosition[] // Quan hệ nhiều-nhiều thông qua bảng trung gian
}

model Position {
  id                       Int                       @id @default(autoincrement())
  name                     String
  recruitmentPostPositions RecruitmentPostPosition[] // Quan hệ nhiều-nhiều thông qua bảng trung gian
}

model RecruitmentPostPosition {
  recruitmentPostId Int
  positionId        Int
  recruitmentPost   RecruitmentPost @relation(fields: [recruitmentPostId], references: [id])
  position          Position        @relation(fields: [positionId], references: [id])

  @@id([recruitmentPostId, positionId]) // Khóa chính tổng hợp
}

model RecordOnRecruitmentPost {
  recordId          Int
  record            Record          @relation(fields: [recordId], references: [id])
  recruitmentPostId Int
  recruitmentPost   RecruitmentPost @relation(fields: [recruitmentPostId], references: [id])
  job               String
  status            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  @@id([recordId, recruitmentPostId]) // Composite primary key
}

model JobDescription {
  id                Int             @id @default(autoincrement())
  location          String // Dia diem lam viec
  level             String          @default("staff") // Junior, Senior, Intern
  experience        String // 1 year, 2 years, 3 years, 4 years, 5 years
  salary            String // Luong
  quantity          Int             @default(1) // So luong tuyen dung
  employmentType    String // Full-time, Part-time, Remote
  gender            String          @default("Not required") // yeu cau gioi tinh
  recruitmentPost   RecruitmentPost @relation(fields: [recruitmentPostId], references: [id])
  recruitmentPostId Int             @unique
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  action    String
  timestamp DateTime
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId   Int
}

model Admin {
  id               Int           @id @default(autoincrement())
  email            String        @unique
  name             String
  gender           String?
  age              Int?
  avatar           String?
  password         String
  verificationCode String?
  activityLogs     ActivityLog[]
  isBanned         Boolean       @default(false)
  // Self-referencing relation for superAdmin
  superAdminId     Int?
  superAdmin       Admin?        @relation("AdminSuperAdmin", fields: [superAdminId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subAdmins        Admin[]       @relation("AdminSuperAdmin")
}

// npx prisma migrate dev --name add_employee_audit_log
model EmployeeAuditLog {
  id                 Int      @id @default(autoincrement())
  action             String   @db.VarChar(10)
  employeeId         Int?
  field              String?  @db.NVarChar(100)
  oldValue           String?  @db.NVarChar(MAX)
  newValue           String?  @db.NVarChar(MAX)
  modifiedBy         String   @db.NVarChar(100)
  modifiedAt         DateTime
  ipAddress          String   @db.VarChar(45)
  suspiciousActivity Boolean  @default(false)
  suspiciousReason   String?  @db.NVarChar(MAX)
}
